//Model class
---------------------------------------------------------------------------------------
package Model;

public class Book {
	
	private String id;
	private String title;
	private String authour;
	private String publishedYear;
	public  String status;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public String getAuthour() {
		return authour;
	}
	public void setAuthour(String authour) {
		this.authour = authour;
	}
	public String getPublishedYear() {
		return publishedYear;
	}
	public void setPublishedYear(String publishedYear) {
		this.publishedYear = publishedYear;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	
	public Book() {
		super();
	}
	public Book(String id, String title, String authour, String publishedYear, String status) {
		this.id = id;
		this.title = title;
		this.authour = authour;
		this.publishedYear = publishedYear;
		this.status = status;
	}
	@Override
	public String toString() {
		return "Book [id=" + id + ", title=" + title + ", authour=" + authour + ", publishedYear=" + publishedYear
				+ ", status=" + status + "]";
	}
}
-------------------------------------------------------------------------------------------------------------------------
Interface :

package Repository;

public interface BookRepository {
	
	public void addBook();
	public void showAllBooks();
	public void showAvaliableBooks();
	public void borrowBook();
	public void returnBook();

}
-----------------------------------------------------------------------------------------------------------------------
Validator class :

package Model;

import java.util.Scanner;
import java.util.regex.Pattern;

public class Validator {

	public static final String RED = "\u001B[31m";
	public static final String RESET = "\u001B[0m";
	public static Pattern ID_PATTERN = Pattern.compile("^\\d{1,4}$");
	public static Pattern Authour_TITLE = Pattern.compile("^[a-zA-Z]+$");
	public static Pattern PUBLISHED_YEAR = Pattern.compile("^\\d{4}$");

	Scanner sc = new Scanner(System.in);

	public String validateId() {

		String bookId;
		while (true) {
			System.out.println("Enter Book ID");
			bookId = sc.nextLine();

			if (!ID_PATTERN.matcher(bookId).matches()) {
				System.out.println(RED + "Please Enter a Valid Book ID " + RESET);

			} else {
				break;
			}
		}
		return bookId;
	}

	public String validateAuthourTitle(String input) {

		String result;
		while (true) {
			if (input == "Title") {
				System.out.println("Enter Title");
			} else {
				System.out.println("Enter Authour");
			}
			result = sc.nextLine();

			if (!Authour_TITLE.matcher(result).matches()) {
				System.out.println(RED + "Enter valid  " + input + RESET);
			} else {
				break;
			}

		}
		return result;
	}
	
	public String validatePublishedYear() {
		String year;
		
		while(true) {
			System.out.println("Enter published year");
			year=sc.nextLine();
			
			if(!PUBLISHED_YEAR.matcher(year).matches()) {
				System.out.println(RED+"Enter the valid publish year"+RESET);
			}else
			{
				break;
			}
			
		}
		return year;
	}
}
------------------------------------------------------------------------------------------------------------------
RepositoryImplementation : 


package Repository;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import Model.Book;
import Model.Validator;

public class BookRepositoryImpl implements BookRepository {
	public static final String RED = "\u001B[31m";
	public static final String RESET = "\u001B[0m";
	public static final String BLUE = "\u001B[34m";
	public static final String GREEN = "\u001B[32m";
	public static final String CYAN = "\u001B[36m";
	public static final String BLACK = "\u001B[30m";

	Scanner sc = new Scanner(System.in);
	Validator validator = new Validator();
	List<Book> books = new ArrayList<>();

	@Override
	public void addBook() {

		String bookId = validator.validateId();
		String title = validator.validateAuthourTitle("Title");
		String authour = validator.validateAuthourTitle("Authour");
		String publishedYear = validator.validatePublishedYear();

		Book book = new Book(bookId, title, authour, publishedYear, "Avaliable");
		books.add(book);
		System.out.println(RED + "Book addded successfully !!" + RESET);
	}

	@Override
	public void showAllBooks() {

		boolean flag = false;
		System.out.println("\n--------------------------------------------------------------------------------");
		System.out.format(CYAN + "%s%15s%15s%15s%15s", "ID", "TITLE", "AUTHOUR", "PUBLISHED YEAR", "STATUS " + RESET);
		System.out.println("\n--------------------------------------------------------------------------------");

		for (Book book : books) {
			System.out.format(CYAN + "%s%15s%15s%15s%15s", book.getId(), book.getTitle(), book.getAuthour(),
					book.getPublishedYear(), book.getStatus() + RESET);
			System.out.println("\n");
			flag = true;
		}
		System.out.println("\n-------------------------------------------------------------------------");
		if (flag == false) {
			System.out.println(RED + "There are no books avaliable " + RESET);
		}
	}

	@Override
	public void showAvaliableBooks() {
		boolean flag = false;
		System.out.println("\n--------------------------------------------------------------------------------");
		System.out.format(CYAN + "%s%15s%15s%15s%15s", "ID", "TITLE", "AUTHOUR", "PUBLISHED YEAR", "STATUS " + RESET);
		System.out.println("\n--------------------------------------------------------------------------------");

		if (books.size() > 0) {
			for (Book book : books) {
				if (book.getStatus().equals("Avaliable")) {
					System.out.format(CYAN + "%s%15s%15s%15s%15s", book.getId(), book.getTitle(), book.getAuthour(),
							book.getPublishedYear(), book.getStatus() + RESET);
					System.out.println("\n");
					flag = true;
				} else {
					System.out.println(RED + "no books avalible in the library" + RESET);
				}
			}
			System.out.println("\n-----------------------------------------------------------------------");
			if (flag == false) {
				System.out.println(RED + "There are no books avalible with the status avalible" + RESET);
			}

		}
	}

	@Override
	public void borrowBook() {

		String bookId = validator.validateId();
		boolean flag = false;
		for (Book book : books) {
			if (book.getId().equals(bookId) && book.getStatus().equals("Avaliable")) {
				flag = true;
				System.out.println(RED + "Book borrowed successfully !!" + RESET);
				book.setStatus("Not Avaliable");
				System.out.println("Borrowed book details : " + book);
			}
		}
		if (flag == false) {
			System.out.println(RED + " Book is not avalible in the library " + RESET);
		}
	}

	@Override
	public void returnBook() {
		String bookId = validator.validateId();
		boolean flag = false;
		for (Book book : books) {
			if (book.getId().equals(bookId) && book.getStatus().equals("Not Avaliable")) {
				flag = true;
				System.out.println(RED + "Book Retured successfully " + RESET);
				book.setStatus("Avaliable");
				System.out.println(GREEN + "Returned book details " + RESET);
			}

		}
		if (flag = false) {
			System.out.println(RED + "We can't return this boook " + RESET);
		}
	}

}
-------------------------------------------------------------------------------------------------------

Main class :


package Model;

import java.util.Scanner;

import Repository.BookRepository;
import Repository.BookRepositoryImpl;

public class BookMain {

	public static void main(String[] args) {

		Scanner sc=new Scanner(System.in);
		
		BookRepository repo=new BookRepositoryImpl();
		System.out.println("***********************Welcome to the Library************************");
		do {
			
			System.out.println("1.Add Book\n"+"2.showAllBooks \n"+"3.showAvalibleBooks\n"+"4.Borrow Book\n"+
			"5.Return Book\n"+"6.Exit");
			
			System.out.println("\n*********************************************************************");
			System.out.println("Enter your choice");
			int choice=sc.nextInt();
			
			switch(choice) {
			case 1:System.out.println("Add Book");
					repo.addBook();
					break;
			case 2:System.out.println("showAllBooks");
					repo.showAllBooks();
					break;
			case 3:System.out.println("showAvalibleBooks");
					repo.showAvaliableBooks();
					break;
			case 4:System.out.println("Borrow Book");
					repo.borrowBook();
					break;
			case 5:System.out.println("Return Book");
					repo.returnBook();
					break;
			case 6:System.out.println("Thanks !!! Visit Again  ");
					System.exit(0);
					break;
			default:System.out.println("Invalid choice ");
					
			}
		}while(true);
	}

}

